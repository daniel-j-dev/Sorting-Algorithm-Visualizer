[{"D:\\sorting-algorithm-visualizer\\src\\index.js":"1","D:\\sorting-algorithm-visualizer\\src\\reportWebVitals.js":"2","D:\\sorting-algorithm-visualizer\\src\\App.js":"3","D:\\sorting-algorithm-visualizer\\src\\components\\Controls\\Controls.js":"4","D:\\sorting-algorithm-visualizer\\src\\components\\CodeBlock\\CodeBlock.js":"5","D:\\sorting-algorithm-visualizer\\src\\components\\AlgoVisual\\AlgoVisual.js":"6","D:\\sorting-algorithm-visualizer\\src\\algorithms\\bubbleSort.js":"7","D:\\sorting-algorithm-visualizer\\src\\contexts\\appContext.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":1222,"mtime":1607480258000,"results":"12","hashOfConfig":"10"},{"size":637,"mtime":1607475114000,"results":"13","hashOfConfig":"10"},{"size":149,"mtime":1607406302000,"results":"14","hashOfConfig":"10"},{"size":620,"mtime":1607480588000,"results":"15","hashOfConfig":"10"},{"size":1812,"mtime":1607481008000,"results":"16","hashOfConfig":"10"},{"size":86,"mtime":1607470920000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"11ydyx7",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"D:\\sorting-algorithm-visualizer\\src\\index.js",[],["37","38"],"D:\\sorting-algorithm-visualizer\\src\\reportWebVitals.js",[],"D:\\sorting-algorithm-visualizer\\src\\App.js",["39"],"import { useState, useEffect } from \"react\"\nimport appContext from \"./contexts/appContext\"\nimport AlgoVisual from \"./components/AlgoVisual/AlgoVisual\"\nimport CodeBlock from \"./components/CodeBlock/CodeBlock\"\nimport Controls from \"./components/Controls/Controls\"\nimport \"./App.css\"\n\nimport bubbleSort from \"./algorithms/bubbleSort\"\n\nfunction App() {\n  const [settings, setSettings] = useState({\n    arraySize: 150,\n    maxValue: 1000,\n    hideCode: false,\n    AnimationSpeed: 5,\n    selectedAlgo: bubbleSort,\n    sorted: false,\n  })\n\n  const [values, setValues] = useState([])\n\n  useEffect(() => {\n    let tempValues = []\n    for (let i = 0; i < settings.arraySize; i++) {\n      tempValues.push(randomInt())\n    }\n    setValues([...tempValues])\n  }, [])\n\n  const randomInt = () => {\n    return Math.floor(Math.random() * settings.maxValue)\n  }\n\n  return (\n    <div className=\"App\">\n      <appContext.Provider value={{ values, setValues, settings, setSettings }}>\n        <div id=\"upper\">\n          <CodeBlock />\n          <AlgoVisual />\n        </div>\n        <div id=\"lower\">\n          <Controls />\n          {/* Add a \"Hire me\" button? */}\n        </div>\n      </appContext.Provider>\n    </div>\n  )\n}\n\nexport default App\n","D:\\sorting-algorithm-visualizer\\src\\components\\Controls\\Controls.js",[],"D:\\sorting-algorithm-visualizer\\src\\components\\CodeBlock\\CodeBlock.js",[],"D:\\sorting-algorithm-visualizer\\src\\components\\AlgoVisual\\AlgoVisual.js",["40","41"],"import { useContext } from \"react\"\r\nimport appContext from \"../../contexts/appContext\"\r\nimport \"./AlgoVisual.css\"\r\n\r\nfunction AlgoVisual() {\r\n  const { values, setValues, settings, setSettings } = useContext(appContext)\r\n\r\n  return (\r\n    <div id=\"AlgoVisual\">\r\n      {values.map((val, index) => (\r\n        <div\r\n          className=\"value\"\r\n          key={index}\r\n          id={index}\r\n          style={{ height: `${(val / settings.maxValue) * 100}%` }} \r\n          //Determining what a bar's height is by what % it is of the maximum value^\r\n        ></div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AlgoVisual\r\n","D:\\sorting-algorithm-visualizer\\src\\algorithms\\bubbleSort.js",["42"],"D:\\sorting-algorithm-visualizer\\src\\contexts\\appContext.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":28,"column":6,"nodeType":"49","endLine":28,"endColumn":8,"suggestions":"50"},{"ruleId":"51","severity":1,"message":"52","line":6,"column":19,"nodeType":"53","messageId":"54","endLine":6,"endColumn":28},{"ruleId":"51","severity":1,"message":"55","line":6,"column":40,"nodeType":"53","messageId":"54","endLine":6,"endColumn":51},{"ruleId":"56","severity":1,"message":"57","line":25,"column":16,"nodeType":"58","messageId":"59","endLine":45,"endColumn":6},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'randomInt' and 'settings.arraySize'. Either include them or remove the dependency array.","ArrayExpression",["62"],"no-unused-vars","'setValues' is assigned a value but never used.","Identifier","unusedVar","'setSettings' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'comparedItems', 'comparedItems', 'comparedItems', 'comparedItems', 'comparedItems'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [randomInt, settings.arraySize]",{"range":"65","text":"66"},[749,751],"[randomInt, settings.arraySize]"]