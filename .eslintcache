[{"D:\\sorting-algorithm-visualizer\\src\\index.js":"1","D:\\sorting-algorithm-visualizer\\src\\reportWebVitals.js":"2","D:\\sorting-algorithm-visualizer\\src\\App.js":"3","D:\\sorting-algorithm-visualizer\\src\\components\\Controls\\Controls.js":"4","D:\\sorting-algorithm-visualizer\\src\\components\\CodeBlock\\CodeBlock.js":"5","D:\\sorting-algorithm-visualizer\\src\\components\\AlgoVisual\\AlgoVisual.js":"6","D:\\sorting-algorithm-visualizer\\src\\algorithms\\bubbleSort.js":"7","D:\\sorting-algorithm-visualizer\\src\\contexts\\appContext.js":"8","D:\\sorting-algorithm-visualizer\\src\\algorithms\\selectionSort.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":1615,"mtime":1607650142000,"results":"13","hashOfConfig":"11"},{"size":3322,"mtime":1607650154000,"results":"14","hashOfConfig":"11"},{"size":1312,"mtime":1607644036000,"results":"15","hashOfConfig":"11"},{"size":620,"mtime":1607584666000,"results":"16","hashOfConfig":"11"},{"size":1812,"mtime":1607551246000,"results":"17","hashOfConfig":"11"},{"size":86,"mtime":1607470920000,"results":"18","hashOfConfig":"11"},{"size":1856,"mtime":1607650686000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"11ydyx7",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"D:\\sorting-algorithm-visualizer\\src\\index.js",[],["43","44"],"D:\\sorting-algorithm-visualizer\\src\\reportWebVitals.js",[],"D:\\sorting-algorithm-visualizer\\src\\App.js",["45"],"import { useState, useEffect } from \"react\"\nimport appContext from \"./contexts/appContext\"\nimport AlgoVisual from \"./components/AlgoVisual/AlgoVisual\"\nimport CodeBlock from \"./components/CodeBlock/CodeBlock\"\nimport Controls from \"./components/Controls/Controls\"\nimport \"./App.css\"\n\nimport bubbleSort from \"./algorithms/bubbleSort\"\n\nfunction App() {\n  const randomizeArray = () => {\n    const randomInt = () => {\n      return Math.floor(Math.random() * settings.maxValue)\n    }\n    let tempValues = []\n    for (let i = 0; i < settings.arraySize; i++) {\n      tempValues.push(randomInt())\n    }\n    setValues([...tempValues])\n    setSettings({\n      ...settings,\n      sorted: false,\n    })\n  }\n\n  const [settings, setSettings] = useState({\n    arraySize: 100,\n    maxValue: 1000,\n    hideCode: false,\n    AnimationSpeed: 7, //Measured in MS delay per action\n    selectedAlgo: bubbleSort,\n    sorted: false,\n    randomizeArray: 0, //Passing the function itself was causing problems so I set this variable as a dependancy to useEffect - just changing this value will force the array to randomize\n  })\n\n  const [values, setValues] = useState([])\n\n  useEffect(() => {\n    randomizeArray()\n  }, [settings.randomizeArray, settings.arraySize])\n\n  return (\n    <div className=\"App\">\n      <appContext.Provider value={{ values, setValues, settings, setSettings }}>\n        <div id=\"upper\">\n          <AlgoVisual />\n        </div>\n        <div id=\"lower\">\n          <CodeBlock />\n          <Controls />\n          {/* Add a \"Hire me\" button? */}\n        </div>\n      </appContext.Provider>\n    </div>\n  )\n}\n\nexport default App\n","D:\\sorting-algorithm-visualizer\\src\\components\\Controls\\Controls.js",[],"D:\\sorting-algorithm-visualizer\\src\\components\\CodeBlock\\CodeBlock.js",[],"D:\\sorting-algorithm-visualizer\\src\\components\\AlgoVisual\\AlgoVisual.js",["46","47"],"import { useContext } from \"react\"\r\nimport appContext from \"../../contexts/appContext\"\r\nimport \"./AlgoVisual.css\"\r\n\r\nfunction AlgoVisual() {\r\n  const { values, setValues, settings, setSettings } = useContext(appContext)\r\n\r\n  return (\r\n    <div id=\"AlgoVisual\">\r\n      {values.map((val, index) => (\r\n        <div\r\n          className=\"value\"\r\n          key={index}\r\n          id={index}\r\n          style={{ height: `${(val / settings.maxValue) * 100}%` }} \r\n          //Determining what a bar's height is by what % it is of the maximum value^\r\n        ></div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AlgoVisual\r\n","D:\\sorting-algorithm-visualizer\\src\\algorithms\\bubbleSort.js",["48"],"const bubbleSort = (array, appContext) => {\r\n  //\"appContext for animations\"\r\n  let ani = [] //For animations\r\n  let swapped = true\r\n  while (swapped) {\r\n    swapped = false\r\n    for (let i = 0; i < array.length; i++) {\r\n      if (array[i] > array[i + 1]) {\r\n        ;[array[i], array[i + 1]] = [array[i + 1], array[i]]\r\n        swapped = true\r\n        ani.push(i) //For animations - indexs of the value we swapped - we only pass i because we know it swaps only with i+1\r\n      }\r\n    }\r\n  }\r\n  bubbleSortAnimations(ani, appContext) //For anmations\r\n  return array\r\n}\r\n\r\nconst bubbleSortAnimations = (ani, { values, setValues, settings }) => {\r\n  let comparedItems = [0, 1]\r\n  let tempArr = [...values]\r\n  for (let i = 0; i < ani.length; i++) {\r\n    let idx1 = ani[i]\r\n    let idx2 = idx1 + 1\r\n    setTimeout(() => {\r\n      //Clear out old comparison colors\r\n      document.getElementById(`${comparedItems[0]}`).style.backgroundColor =\r\n        \"#90ee90\"\r\n      document.getElementById(`${comparedItems[1]}`).style.backgroundColor =\r\n        \"#90ee90\"\r\n\r\n      //Change colors for current comparison items\r\n      comparedItems = [idx1, idx2]\r\n      document.getElementById(`${idx1}`).style.backgroundColor = \"#ffc600\"\r\n      document.getElementById(`${idx2}`).style.backgroundColor = \"#ffc600\"\r\n      ;[tempArr[idx1], tempArr[idx2]] = [tempArr[idx2], tempArr[idx1]]\r\n      setValues([...tempArr])\r\n      //If on last item of loop, change the last two comparison item's colors back to normal\r\n      if (i === ani.length - 1) {\r\n        document.getElementById(`${comparedItems[0]}`).style.backgroundColor =\r\n          \"#90ee90\"\r\n        document.getElementById(`${comparedItems[1]}`).style.backgroundColor =\r\n          \"#90ee90\"\r\n      }\r\n    }, i * settings.AnimationSpeed)\r\n  }\r\n}\r\n\r\nexport default bubbleSort\r\n","D:\\sorting-algorithm-visualizer\\src\\contexts\\appContext.js",[],"D:\\sorting-algorithm-visualizer\\src\\algorithms\\selectionSort.js",["49"],"const selectionSort = (array, appContext) => {\r\n  //appContext for animations\r\n  let ani = [] //For animations\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    let min = i\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      if (array[j] < array[min]) min = j\r\n      ani.push([j, min, false]) //For animations\r\n    }\r\n    ;[array[i], array[min]] = [array[min], array[i]]\r\n    ani.push([i, min, true]) //For animations\r\n  }\r\n  selectionSortAnimation(ani, appContext) //For animations\r\n  return array\r\n}\r\n\r\nconst selectionSortAnimation = (ani, { values, setValues, settings }) => {\r\n  let lastItems = [0, 1]\r\n  let tempArr = [...values]\r\n  for (let i = 0; i < ani.length; i++) {\r\n    let idx1 = ani[i][0],\r\n      idx2 = ani[i][1]\r\n\r\n    setTimeout(() => {\r\n      //Clear out old colors\r\n      document.getElementById(`${lastItems[0]}`).style.backgroundColor =\r\n        \"#90ee90\"\r\n      document.getElementById(`${lastItems[1]}`).style.backgroundColor =\r\n        \"#90ee90\"\r\n\r\n      //Change colors for current items\r\n\r\n      lastItems = [idx1, idx2]\r\n\r\n      if (ani[i][2] === true) {\r\n        //If we swapped the compared items...just swap in this array\r\n        ;[tempArr[idx1], tempArr[idx2]] = [tempArr[idx2], tempArr[idx1]] //swap\r\n        setValues([...tempArr])\r\n      } else {\r\n        document.getElementById(`${idx1}`).style.backgroundColor = \"#FF0000\"\r\n        document.getElementById(`${idx2}`).style.backgroundColor = \"#FFFF00\"\r\n      }\r\n\r\n      //If on last item of loop, change the last two item's colors back to normal\r\n      if (i === ani.length - 1) {\r\n        document.getElementById(`${lastItems[0]}`).style.backgroundColor =\r\n          \"#90ee90\"\r\n        document.getElementById(`${lastItems[1]}`).style.backgroundColor =\r\n          \"#90ee90\"\r\n      }\r\n    }, i * settings.AnimationSpeed)\r\n  }\r\n}\r\n\r\nexport default selectionSort\r\n",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":40,"column":6,"nodeType":"56","endLine":40,"endColumn":51,"suggestions":"57"},{"ruleId":"58","severity":1,"message":"59","line":6,"column":19,"nodeType":"60","messageId":"61","endLine":6,"endColumn":28},{"ruleId":"58","severity":1,"message":"62","line":6,"column":40,"nodeType":"60","messageId":"61","endLine":6,"endColumn":51},{"ruleId":"63","severity":1,"message":"64","line":25,"column":16,"nodeType":"65","messageId":"66","endLine":45,"endColumn":6},{"ruleId":"63","severity":1,"message":"67","line":24,"column":16,"nodeType":"65","messageId":"66","endLine":51,"endColumn":6},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'randomizeArray'. Either include it or remove the dependency array.","ArrayExpression",["70"],"no-unused-vars","'setValues' is assigned a value but never used.","Identifier","unusedVar","'setSettings' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'comparedItems', 'comparedItems', 'comparedItems', 'comparedItems', 'comparedItems'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'lastItems', 'lastItems', 'lastItems', 'lastItems', 'lastItems'.","no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [settings.randomizeArray, settings.arraySize, randomizeArray]",{"range":"73","text":"74"},[1189,1234],"[settings.randomizeArray, settings.arraySize, randomizeArray]"]